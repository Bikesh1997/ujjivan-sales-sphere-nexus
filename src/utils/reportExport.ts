// Report export utilities for PDF and Excel generation

export const exportToPDF = async (reportData: any) => {
  try {
    // Create a simple HTML document for PDF
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <title>Smart Reports - ${reportData.title}</title>
        <style>
          body { font-family: Arial, sans-serif; padding: 40px; color: #333; }
          h1 { color: #0F766E; border-bottom: 3px solid #0F766E; padding-bottom: 10px; }
          h2 { color: #0F766E; margin-top: 30px; }
          .kpi-grid { display: grid; grid-template-columns: repeat(2, 1fr); gap: 20px; margin: 20px 0; }
          .kpi-card { border: 1px solid #e5e7eb; padding: 20px; border-radius: 8px; }
          .kpi-title { font-size: 14px; color: #6b7280; margin-bottom: 8px; }
          .kpi-value { font-size: 28px; font-weight: bold; color: #0F766E; }
          .kpi-change { font-size: 14px; color: #10b981; margin-top: 4px; }
          table { width: 100%; border-collapse: collapse; margin: 20px 0; }
          th, td { padding: 12px; text-align: left; border: 1px solid #e5e7eb; }
          th { background: #0F766E; color: white; font-weight: 600; }
          tr:nth-child(even) { background: #f9fafb; }
          .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #e5e7eb; font-size: 12px; color: #6b7280; }
        </style>
      </head>
      <body>
        <h1>${reportData.title}</h1>
        <p><strong>Generated:</strong> ${new Date().toLocaleString()}</p>
        <p><strong>Period:</strong> ${reportData.period}</p>
        
        <h2>Key Performance Indicators</h2>
        <div class="kpi-grid">
          ${reportData.kpis.map((kpi: any) => `
            <div class="kpi-card">
              <div class="kpi-title">${kpi.title}</div>
              <div class="kpi-value">${kpi.value}</div>
              <div class="kpi-change">${kpi.change}</div>
            </div>
          `).join('')}
        </div>

        <h2>Detailed Report</h2>
        <table>
          <thead>
            <tr>
              ${reportData.tableHeaders.map((header: string) => `<th>${header}</th>`).join('')}
            </tr>
          </thead>
          <tbody>
            ${reportData.tableData.map((row: any) => `
              <tr>
                ${Object.values(row).map((cell: any) => `<td>${cell}</td>`).join('')}
              </tr>
            `).join('')}
          </tbody>
        </table>

        <div class="footer">
          <p>This is an automated report generated by Smart Reports & Analysis</p>
          <p>Â© ${new Date().getFullYear()} SalesForce Pro - Banking CRM Platform</p>
        </div>
      </body>
      </html>
    `;

    // Create a blob and download
    const blob = new Blob([htmlContent], { type: 'text/html' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `report-${Date.now()}.html`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    return true;
  } catch (error) {
    console.error('Error exporting to PDF:', error);
    throw error;
  }
};

export const exportToExcel = async (reportData: any) => {
  try {
    // Create CSV content
    let csvContent = `${reportData.title}\n`;
    csvContent += `Generated: ${new Date().toLocaleString()}\n`;
    csvContent += `Period: ${reportData.period}\n\n`;

    // Add KPIs section
    csvContent += 'KEY PERFORMANCE INDICATORS\n';
    csvContent += 'Metric,Value,Change\n';
    reportData.kpis.forEach((kpi: any) => {
      csvContent += `"${kpi.title}","${kpi.value}","${kpi.change}"\n`;
    });
    csvContent += '\n';

    // Add detailed data
    csvContent += 'DETAILED REPORT\n';
    csvContent += reportData.tableHeaders.join(',') + '\n';
    reportData.tableData.forEach((row: any) => {
      const values = Object.values(row).map((val: any) => `"${val}"`);
      csvContent += values.join(',') + '\n';
    });

    // Create blob and download
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `report-${Date.now()}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    return true;
  } catch (error) {
    console.error('Error exporting to Excel:', error);
    throw error;
  }
};
